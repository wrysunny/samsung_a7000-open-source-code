package com.sec.android.app.dns.ui;import com.sec.android.app.dns.DNSEvent;import com.sec.android.app.dns.DNSService;import com.sec.android.app.dns.LogDns;import com.sec.android.app.dns.RadioDNSServiceDataIF;import com.sec.android.app.dns.radioepg.EpgPlayer;import com.sec.android.app.dns.radioepg.EpgPlayer.OnBufferingUpdateListener;import com.sec.android.app.fm.MainActivity;import com.sec.android.app.fm.R;import com.sec.android.app.fm.RadioApplication;import com.sec.android.app.fm.RadioPlayer;import com.sec.android.app.fm.util.NetworkMonitorUtil;import android.app.AlertDialog;import android.app.Dialog;import android.app.DialogFragment;import android.app.FragmentManager;import android.app.FragmentTransaction;import android.content.BroadcastReceiver;import android.content.ComponentName;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.ServiceConnection;import android.content.DialogInterface.OnClickListener;import android.content.res.Configuration;import android.os.Bundle;import android.os.IBinder;import android.support.v4.app.FragmentActivity;import android.view.LayoutInflater;import android.view.View;import android.widget.CheckBox;import android.widget.TextView;import android.widget.LinearLayout;import android.widget.ScrollView;public class DnsAlertDialogActivity extends FragmentActivity {    public static class DnsDialogFragment extends DialogFragment {        public static final int ACTION_NONE = 0;        public static final int ACTION_START_EPG = 1;        public static final int ACTION_START_VIS = 2;        public static final String KEY_ACTION = "key_action";        public static final String KEY_MSG = "key_msg";        public static final String KEY_TITLE = "key_title";        private static final String TAG = "DnsDialogFragment";        public static DnsDialogFragment newInstance(int titleId, int msgId, int action) {            DnsDialogFragment frag = new DnsDialogFragment();            Bundle args = new Bundle();            args.putInt(KEY_TITLE, titleId);            args.putInt(KEY_MSG, msgId);            args.putInt(KEY_ACTION, action);            frag.setArguments(args);            return frag;        }        private CheckBox mCheckBox = null;        private boolean mDismissed = false;        private OnClickListener mDnsNetworkOnClickListener = new OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int id) {                LogDns.d(TAG, "onClick() - " + id);                DnsAlertDialogActivity activity = (DnsAlertDialogActivity) getActivity();                int action = getArguments().getInt(KEY_ACTION);                switch (id) {                case DialogInterface.BUTTON_POSITIVE:                    boolean value = mCheckBox.isChecked();                    RadioApplication.setWifiChecked(value);                    switch (action) {                    case ACTION_START_EPG:                        RadioPlayer player = RadioPlayer.getInstance();                        activity.mDnsService.startStreamRadio(String.format("%05d",                                player.getFrequency()));                        RadioDNSServiceDataIF.waitAndGetEpgStartingStream();                        activity.showDialog(R.string.switch_to_internet_radio,                                R.string.dialog_popup_wait, 0);                        break;                    case ACTION_START_VIS:                        MainActivity._instance.showInformationView();                        break;                    default:                        break;                    }                    break;                case DialogInterface.BUTTON_NEGATIVE:                    if (action == ACTION_START_VIS) {                    }                    break;                default:                    break;                }            }        };        private OnClickListener mDnsSwitchingToFmRadioOnClickListener = new OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int id) {                LogDns.d(TAG, "onClick() - id:" + id);                switch (id) {                case DialogInterface.BUTTON_POSITIVE:                    if (RadioDNSServiceDataIF.isEpgPlayingStreamRadio()) {                        if (MainActivity._instance != null && MainActivity.mIsRecording) {                            MainActivity._instance.stopFMRecording();                        }                        DnsAlertDialogActivity activity = (DnsAlertDialogActivity) getActivity();                        activity.mDnsService.stopStreamRadio();                    }                    break;                default:                    break;                }            }        };        private OnClickListener mDnsSwitchingToStreamOnClickListener = new OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int id) {                LogDns.d(TAG, "onClick() - id:" + id);                DnsAlertDialogActivity activity = (DnsAlertDialogActivity) getActivity();                switch (id) {                case DialogInterface.BUTTON_POSITIVE:                    if (mMsgId == R.string.record_suspended_continue) {                        if (MainActivity._instance != null && MainActivity.mIsRecording) {                            MainActivity._instance.stopFMRecording();                        }                    } else if (mMsgId == R.string.switch_to_internet_radio) {                        if (MainActivity._instance != null && MainActivity.mIsRecording) {                            activity.showDialog(R.string.switch_to_internet_radio,                                    R.string.record_suspended_continue, 0);                            return;                        }                    }                    if (NetworkMonitorUtil.needBillWarning(getActivity())) {                        activity.showDialog(R.string.connect_mobile_network, 0, ACTION_START_EPG);                    } else {                        RadioPlayer player = RadioPlayer.getInstance();                        activity.mDnsService.startStreamRadio(String.format("%05d",                                player.getFrequency()));                        RadioDNSServiceDataIF.waitAndGetEpgStartingStream();                        activity.showDialog(R.string.switch_to_internet_radio,                                R.string.dialog_popup_wait, 0);                    }                    break;                case DialogInterface.BUTTON_NEGATIVE:                    activity.mDnsService.cancelJumping();                    break;                default:                    break;                }            }        };        private int mMsgId = 0;        private Dialog createNetworkDialog(int titleId) {            LogDns.v(TAG, "createNetworkDialog()");            View view = LayoutInflater.from(getActivity()).inflate(R.layout.wifi_warning_dialog,                    null);            ScrollView wifiWarningLayout = (ScrollView) view.findViewById(R.id.wifi_warning);            TextView tv = (TextView) view.findViewById(R.id.wifi_text);            tv.setText(R.string.wifi_warning);            mCheckBox = (CheckBox) view.findViewById(R.id.check_box);            Dialog dialog = new AlertDialog.Builder(getActivity()).setView(wifiWarningLayout)                    .setTitle(titleId)                    .setNegativeButton(R.string.cancel, mDnsNetworkOnClickListener)                    .setPositiveButton(R.string.ok, mDnsNetworkOnClickListener).create();            return dialog;        }        private Dialog createSwitchDialog(int titleId, int msgId) {            LogDns.v(TAG, "createSwitchDialog()");            Dialog dialog = null;            switch (msgId) {            case R.string.record_suspended_continue:                OnClickListener listener = RadioDNSServiceDataIF.isEpgPlayingStreamRadio() ? mDnsSwitchingToFmRadioOnClickListener                        : mDnsSwitchingToStreamOnClickListener;                dialog = new AlertDialog.Builder(getActivity()).setMessage(getString(msgId))                        .setPositiveButton(R.string.ok, listener)                        .setNegativeButton(R.string.cancel, listener).create();                break;            case R.string.switch_to_internet_radio:                dialog = new AlertDialog.Builder(getActivity()).setMessage(getString(msgId) + "?")                        .setPositiveButton(R.string.ok, mDnsSwitchingToStreamOnClickListener)                        .setNegativeButton(R.string.cancel, mDnsSwitchingToStreamOnClickListener)                        .create();                break;            default:                break;            }            if (dialog != null && titleId > 0) {                dialog.setTitle(titleId);            }            return dialog;        }        private Dialog createWaitDialog(int titleId, int msgId) {            LogDns.v(TAG, "createWaitDialog()");            DnsAlertDialogActivity activity = (DnsAlertDialogActivity) getActivity();            View view = LayoutInflater.from(activity.mDnsService).inflate(R.layout.dns_buffering,                    null);            LinearLayout bufferingLayout = (LinearLayout) view.findViewById(R.id.dns_buffering);            Dialog dialog = new AlertDialog.Builder(getActivity()).setView(bufferingLayout)                    .setNegativeButton(R.string.cancel, new OnClickListener() {                        @Override                        public void onClick(DialogInterface dialog, int whichButton) {                            LogDns.d(TAG, "onClick()");                            DnsAlertDialogActivity activity = (DnsAlertDialogActivity) getActivity();                            activity.mDnsService.stopStreamRadio();                        }                    }).create();            if (titleId > 0) {                dialog.setTitle(titleId);            }            RadioDNSServiceDataIF.setOnBufferingUpdateListener(sBufferingUpdateListener);            return dialog;        }        @Override        public void onCancel(DialogInterface dialog) {            LogDns.v(TAG, "onCancel()");            super.onCancel(dialog);            String tag = getTag();            DnsAlertDialogActivity activity = (DnsAlertDialogActivity) getActivity();            if (DIALOG_TAG_SWITCH.equals(tag)) {                activity.mDnsService.cancelJumping();            } else if (DIALOG_TAG_WAIT.equals(tag)) {                activity.mDnsService.stopStreamRadio();            } else if (DIALOG_TAG_NETWORK.equals(tag)) {                mDnsNetworkOnClickListener.onClick(dialog, DialogInterface.BUTTON_NEGATIVE);            }        }        @Override        public Dialog onCreateDialog(Bundle savedInstanceState) {            int titleId = getArguments().getInt(KEY_TITLE);            mMsgId = getArguments().getInt(KEY_MSG);            Dialog dialog = null;            switch (mMsgId) {            case R.string.dialog_popup_wait:                dialog = createWaitDialog(titleId, mMsgId);                break;            case R.string.record_suspended_continue:            case R.string.switch_to_internet_radio:                dialog = createSwitchDialog(titleId, mMsgId);                break;            default:                if (titleId == R.string.connect_mobile_network) {                    dialog = createNetworkDialog(titleId);                }                break;            }            return dialog;        }        @Override        public void onDismiss(DialogInterface dialog) {            String tag = getTag();            LogDns.d(TAG, "onDismiss() - " + tag);            super.onDismiss(dialog);            mDismissed = true;            if (sInstance != null && sInstance.isEmpty()) {                sInstance.finish();            }        }        @Override        public void show(FragmentManager manager, String tag) {            if (manager.findFragmentByTag(tag) == null) {                FragmentTransaction ft = manager.beginTransaction();                ft.add(this, tag);                ft.commitAllowingStateLoss();            }        }    }    private static final String DIALOG_TAG_NETWORK = "networkDialog";    private static final String DIALOG_TAG_RECORD = "recordDialog";    private static final String DIALOG_TAG_SWITCH = "switchDialog";    private static final String DIALOG_TAG_WAIT = "waitDialog";    private final static OnBufferingUpdateListener sBufferingUpdateListener = new OnBufferingUpdateListener() {        public void onBufferingUpdate(final EpgPlayer mp, final int percent) {            LogDns.d(TAG, "onBufferingUpdate() - " + percent + " %");            if ((percent < 0 || percent > 100) && (sInstance != null)) {                sInstance.removeDialog(DIALOG_TAG_WAIT);            }        }    };    private static DnsAlertDialogActivity sInstance = null;    private static final String TAG = "DnsAlertDialogActivity";    public static DnsAlertDialogActivity getInstance() {        return sInstance;    }    private static String makeTag(int msgId) {        String tag = null;        switch (msgId) {        case R.string.dialog_popup_wait:            tag = DIALOG_TAG_WAIT;            break;        case R.string.record_suspended_continue:            tag = DIALOG_TAG_RECORD;            break;        case R.string.switch_to_internet_radio:            tag = DIALOG_TAG_SWITCH;            break;        case R.string.connect_mobile_network:            tag = DIALOG_TAG_NETWORK;        default:            break;        }        return tag;    }    private DNSService mDnsService = null;    private int mLastAction = 0;    private int mLastMsgId = 0;    private String mLastTag = null;    private int mLastTitleId = 0;    private BroadcastReceiver mReceiver = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            String action = intent.getAction();            LogDns.d(TAG, "onReceive() - action:" + LogDns.filter(action));            if (DNSEvent.DNS_ACTION_UPDATE_STREAM_PREPARED.equals(action)                    || DNSEvent.DNS_ACTION_MEDIA_INFO_BUFFERING_END.equals(action)) {                removeDialog(DIALOG_TAG_WAIT);            } else if (DNSEvent.DNS_ACTION_MEDIA_STOPPED.equals(action)) {                finish();            }        }    };    private ServiceConnection mServiceConn = new ServiceConnection() {        @Override        public void onServiceConnected(ComponentName cName, IBinder service) {            LogDns.d(TAG, "onServiceConnected()");            mDnsService = ((DNSService.LocalBinder) service).getDNSService();            showDialog(mLastTitleId, mLastMsgId, mLastAction);        }        public void onServiceDisconnected(ComponentName cName) {            LogDns.d(TAG, "onServiceDisconnected()");            mDnsService = null;        }    };    private IntentFilter getIntentFilter() {        IntentFilter iFilter = new IntentFilter();        iFilter.addAction(DNSEvent.DNS_ACTION_MEDIA_INFO_BUFFERING_END);        iFilter.addAction(DNSEvent.DNS_ACTION_MEDIA_STOPPED);        iFilter.addAction(DNSEvent.DNS_ACTION_UPDATE_STREAM_PREPARED);        return iFilter;    }    private boolean isEmpty() {        FragmentManager fm = getFragmentManager();        DnsDialogFragment f1 = (DnsDialogFragment) fm.findFragmentByTag(DIALOG_TAG_SWITCH);        DnsDialogFragment f2 = (DnsDialogFragment) fm.findFragmentByTag(DIALOG_TAG_WAIT);        DnsDialogFragment f3 = (DnsDialogFragment) fm.findFragmentByTag(DIALOG_TAG_NETWORK);        DnsDialogFragment f4 = (DnsDialogFragment) fm.findFragmentByTag(DIALOG_TAG_RECORD);        return ((f1 == null || f1.mDismissed) && (f2 == null || f2.mDismissed)                && (f3 == null || f3.mDismissed) && (f4 == null || f4.mDismissed));    }    @Override    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        LogDns.v(TAG, "onConfigurationChanged()");    }    @Override    protected void onCreate(Bundle bundle) {        super.onCreate(bundle);        sInstance = this;        Intent intent = getIntent();        mLastTitleId = intent.getIntExtra(DnsDialogFragment.KEY_TITLE, 0);        mLastMsgId = intent.getIntExtra(DnsDialogFragment.KEY_MSG, 0);        mLastAction = intent.getIntExtra(DnsDialogFragment.KEY_ACTION, 0);        mLastTag = mLastMsgId != 0 ? makeTag(mLastMsgId) : makeTag(mLastTitleId);        LogDns.d(TAG, "onCreate() - title:" + mLastTitleId + " msg:" + mLastMsgId + " tag:"                + mLastTag);        mDnsService = DNSService.bindService(DnsAlertDialogActivity.this, mServiceConn);        registerReceiver(mReceiver, getIntentFilter());    }    @Override    protected void onDestroy() {        LogDns.v(TAG, "onDestroy() - " + (this == sInstance));        if (this == sInstance) {            sInstance = null;        }        DNSService.unbindService(this, mServiceConn);        unregisterReceiver(mReceiver);        super.onDestroy();    }    @Override    protected void onNewIntent(Intent intent) {        super.onNewIntent(intent);        int titleId = intent.getIntExtra(DnsDialogFragment.KEY_TITLE, 0);        int msgId = intent.getIntExtra(DnsDialogFragment.KEY_MSG, 0);        int action = intent.getIntExtra(DnsDialogFragment.KEY_ACTION, 0);        LogDns.d(TAG, "onNewIntent() - " + makeTag(msgId));        DialogFragment dialogFrag = (DialogFragment) getFragmentManager().findFragmentByTag(                makeTag(mLastMsgId));        if (mLastTitleId == 0 && mLastMsgId == 0 && dialogFrag == null) {            LogDns.e(TAG, "Dialog is missed.");            return;        }        if (mLastMsgId == R.string.switch_to_internet_radio && msgId == R.string.dialog_popup_wait) {            if (dialogFrag != null) {                removeDialog(DIALOG_TAG_SWITCH);                showDialog(titleId, msgId, action);            } else {                mLastMsgId = msgId;                mLastTitleId = titleId;            }        }    }    private void removeDialog(String tag) {        DialogFragment dialogFrag = (DialogFragment) getFragmentManager().findFragmentByTag(tag);        if (dialogFrag != null && !isFinishing()) {            LogDns.v(TAG, "removeDialog() - " + tag);            FragmentTransaction ft = getFragmentManager().beginTransaction();            ft.remove(dialogFrag);            ft.commitAllowingStateLoss();            dialogFrag.dismissAllowingStateLoss();//            dialogFrag.dismiss();        }        if (DIALOG_TAG_WAIT.equals(tag)) {            RadioDNSServiceDataIF.removeOnBufferingUpdateListener(sBufferingUpdateListener);        }    }    private void showDialog(int titleId, int msgId, int action) {        mLastMsgId = msgId;        mLastTitleId = titleId;        mLastAction = action;        mLastTag = mLastMsgId != 0 ? makeTag(mLastMsgId) : makeTag(mLastTitleId);        if (DIALOG_TAG_WAIT.equals(mLastTag) && !RadioDNSServiceDataIF.isEpgPlayingStreamRadio()) {            LogDns.d(TAG, "StreamRadio has been already stopped. So wait dialog will be skipped");            finish();            return;        }        LogDns.d(TAG, "showDialog : " + mLastTag);        DialogFragment dialogFrag = DnsDialogFragment.newInstance(titleId, msgId, action);        dialogFrag.show(getFragmentManager(), mLastTag);    }}