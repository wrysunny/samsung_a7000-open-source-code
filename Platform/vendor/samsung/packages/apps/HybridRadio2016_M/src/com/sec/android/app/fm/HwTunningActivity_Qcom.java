package com.sec.android.app.fm;import java.util.StringTokenizer;import com.samsung.media.fmradio.FMPlayer;import com.samsung.media.fmradio.FMPlayerException;import com.sec.android.app.dns.ui.DnsKoreaTestActivity;import android.app.Activity;import android.content.Context;import android.content.Intent;import android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.Toast;public class HwTunningActivity_Qcom extends Activity {    public static final String LOGTAG = "HWTunningApp_Qcom";    private final int MENU_CONTEXT_GOTO_HYBRIDRADIO_TEST = 0;    private final int MENU_CONTEXT_GOTO_RSSI_TEST = 1;    // private final int MENU_CONTEXT_GOTO_INTENNA_TEST = 2;    // private final int MENU_CONTEXT_GOTO_SOFTMUTE_TEST = 3;    // private final int MENU_CONTEXT_GOTO_VOLUMESETTING_TEST = 4;    // private final int MENU_CONTEXT_GOTO_SOFTMUTE_TEST_STE = 5;    private final int MENU_CONTEXT_GOTO_NOISE_TEST = 6;    private LinearLayout mNewScanAlgoLayout = null;    private LinearLayout mOldScanAlgoLayout = null;    private EditText mCurChannel = null;    // private EditText mCurRssiThreshold = null;    // private EditText mCurRssiDelta = null;    private Button mBtnSetType = null;    private EditText mCurScanAlgorithmType = null;    private EditText mCurOnThreshold = null;    private EditText mCurOffThreshold = null;    private EditText mCurSINRThreshold = null;    private EditText mCurSINRSamples = null;    private EditText mCurCF0TH12 = null;    private EditText mCurRMSSIFirstStage = null;    private EditText mCurSINRFirstStage = null;    private EditText mCurSINRFinalStage = null;    private EditText mCurSinrSamplesCnt = null;    private EditText mAFJumpRMSSIThreshold = null;    private EditText mAFJumpRMSSISamples = null;    private EditText mGoodChannelRMSSIThreshold = null;    private EditText mHybridSearch = null;    private Button mBtnRenewal = null;    private Button mBtnApply = null;    private Context mContext;    private FMPlayer mPlayer = null;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        mContext = this;        mPlayer = (FMPlayer) getSystemService(Context.FM_RADIO_SERVICE);        setContentView(R.layout.hwtunning_qcom);        mNewScanAlgoLayout = (LinearLayout) findViewById(R.id.new_scan_algorithm_type);        mOldScanAlgoLayout = (LinearLayout) findViewById(R.id.old_scan_algorithm_type);        mCurChannel = (EditText) findViewById(R.id.cur_channel);        // mCurRssiThreshold = (EditText) findViewById(R.id.cur_rssi);        // mCurRssiDelta = (EditText) findViewById(R.id.cur_del);        mBtnSetType = (Button) findViewById(R.id.btn_set_type);        mBtnSetType.setOnClickListener(new OnClickListener() {            @Override            public void onClick(View view) {                String algorithmType = mCurScanAlgorithmType.getText().toString();                if (algorithmType == null || algorithmType.isEmpty()) {                    showToast("Input on searchAlgoType 0~1");                    try {                        mCurScanAlgorithmType.setText(String.valueOf(mPlayer.GetSearchAlgoType()));                    } catch (FMPlayerException e) {                        e.printStackTrace();                    }                    return;                }                int searchAlgoType = Integer.valueOf(mCurScanAlgorithmType.getText().toString());                if (searchAlgoType < 0 || searchAlgoType > 1) {                    showToast("Input on searchAlgoType 0~1");                    try {                        mCurScanAlgorithmType.setText(String.valueOf(mPlayer.GetSearchAlgoType()));                    } catch (FMPlayerException e) {                        e.printStackTrace();                    }                    return;                }                try {                    mPlayer.SetSearchAlgoType(searchAlgoType);                } catch (FMPlayerException e) {                    e.printStackTrace();                }                refreshLayout();            }        });        mCurScanAlgorithmType = (EditText) findViewById(R.id.scan_algorithm_type);        mCurOnThreshold = (EditText) findViewById(R.id.cur_on_ch_th);        mCurOffThreshold = (EditText) findViewById(R.id.cur_off_ch_th);        mCurSINRThreshold = (EditText) findViewById(R.id.cur_sinr_th);        mCurSINRSamples = (EditText) findViewById(R.id.cur_sinr_samples);        mCurCF0TH12 = (EditText) findViewById(R.id.cur_cf0th12);        mCurRMSSIFirstStage = (EditText) findViewById(R.id.cur_rmssi_first_stage);        mCurSINRFirstStage = (EditText) findViewById(R.id.cur_sinr_first_stage);        mCurSINRFinalStage = (EditText) findViewById(R.id.cur_sinr_final_stage);        mCurSinrSamplesCnt = (EditText) findViewById(R.id.cur_sinr_samples_cnt);        mAFJumpRMSSIThreshold = (EditText) findViewById(R.id.cur_af_jump_rmssi_threshold);        mAFJumpRMSSISamples = (EditText) findViewById(R.id.cur_af_jump_rmssi_samples);        mGoodChannelRMSSIThreshold = (EditText) findViewById(R.id.cur_good_channel_rmssi_threshold);        mHybridSearch = (EditText) findViewById(R.id.cur_hybrid_search);        mBtnRenewal = (Button) findViewById(R.id.btn_renewal);        mBtnRenewal.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                showToast("Current RSSI Renewal");                try {                    if (!mPlayer.isOn()) {                        refreshLayout();                        return;                    }                } catch (FMPlayerException e1) {                    e1.printStackTrace();                }                long channel;                try {                    try {                        channel = Integer.valueOf(mCurChannel.getText().toString());// mService.getTunedChannelFreqKHz();                    } catch (NumberFormatException e) {                        showToast("Wrong number format");                        return;                    }                    mPlayer.tune(channel);                    refreshLayout();                } catch (FMPlayerException e) {                    e.printStackTrace();                }            }        });        mBtnApply = (Button) findViewById(R.id.btn_apply);        mBtnApply.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                // int threshold;                // int delta;                int onChTh = -1;                int offChTh = -1;                int sinrTh = -1;                int sinrSamples = -1;                int cf0th12 = -1;                int rmssiFirstStage = -1;                int sinrFirstStage = -1;                int sinrFinalStage = -1;                int afJumpRmssiTh;                int afJumpRmssiSamples;                int GdChRmssiTh;                String hybridSearchValue;                int searchAlgoType = 0;                try {                    searchAlgoType = mPlayer.GetSearchAlgoType();                } catch (FMPlayerException e1) {                    e1.printStackTrace();                }                try {                    // threshold =                    // Integer.valueOf(mCurRssiThreshold.getText().toString());                    // delta =                    // Integer.valueOf(mCurRssiDelta.getText().toString());                    if (searchAlgoType == 1) {                        onChTh = Integer.valueOf(mCurOnThreshold.getText().toString());                        offChTh = Integer.valueOf(mCurOffThreshold.getText().toString());                        sinrTh = Integer.valueOf(mCurSINRThreshold.getText().toString());                        sinrSamples = Integer.valueOf(mCurSINRSamples.getText().toString());                    } else if (searchAlgoType == 0) {                        cf0th12 = Integer.valueOf(mCurCF0TH12.getText().toString());                        rmssiFirstStage = Integer.valueOf(mCurRMSSIFirstStage.getText().toString());                        sinrFirstStage = Integer.valueOf(mCurSINRFirstStage.getText().toString());                        sinrFinalStage = Integer.valueOf(mCurSINRFinalStage.getText().toString());                    }                    afJumpRmssiTh = Integer.valueOf(mAFJumpRMSSIThreshold.getText().toString());                    afJumpRmssiSamples = Integer.valueOf(mAFJumpRMSSISamples.getText().toString());                    GdChRmssiTh = Integer.valueOf(mGoodChannelRMSSIThreshold.getText().toString());                } catch (NumberFormatException e) {                    showToast("Wrong number format");                    return;                }                hybridSearchValue = mHybridSearch.getText().toString();                // if(threshold < 90 || threshold > 110) {                // showToast("Input rssi 90~110");                // return;                // }                // 2011.10.19 TOD_AHS : Delta -> 0~10. [                // if(delta < 0 || delta > 10) {                // showToast("Input delta 0~10");                // return;                // }                // 2011.10.19 TOD_AHS : Delta -> 0~10. ]                if (searchAlgoType == 1) {                    if (onChTh < 0 || onChTh > 255) {                        showToast("Input on threshold 0~255");                        return;                    }                    if (offChTh < 0 || offChTh > 255) {                        showToast("Input on threshold 0~255");                        return;                    }                    if (sinrTh < -128 || sinrTh > 127) {                        showToast("Input on \"SINR Threshold\" -128~127");                        return;                    }                    if (sinrSamples < 1 || sinrSamples > 255) {                        showToast("Input on \"Number of SINR Samples\" 1~255");                        return;                    }                } else {                    if (cf0th12 < -2147483648 || cf0th12 > 2147483647) {                        showToast("Input on \"Number of CF0TH12\" -2147483648~2147483647");                        return;                    }                    if (rmssiFirstStage < -128 || rmssiFirstStage > 127) {                        showToast("Input on \"Number of RMSSI First Stage\" -128~127");                        return;                    }                    if (sinrFirstStage < -128 || sinrFirstStage > 127) {                        showToast("Input on \"Number of SINR First Stage\" -128~127");                        return;                    }                    if (sinrFinalStage < -128 || sinrFinalStage > 127) {                        showToast("Input on \"Number of SINR Final Stage\" -128~127");                        return;                    }                }                if ((hybridSearchValue == null) || (hybridSearchValue.length() == 0)) {                    hybridSearchValue = "0";                } else {                    StringTokenizer st = new StringTokenizer(hybridSearchValue, ",");                    try {                        if (((st.countTokens() - 1) / 2) != Integer.parseInt(st.nextToken())) {                            showToast("The number of hybrid search value is wrong");                            return;                        }                    } catch (NumberFormatException e) {                        showToast("Hybrid search value is not number");                        return;                    }                }                try {                    // mService.setSignalThreshold(threshold - 90);                    // mService.setRmssiDel(delta);                    if (searchAlgoType == 1) {                        mPlayer.SetOnChannelThreshold(onChTh);                        mPlayer.SetOffChannelThreshold(offChTh);                        mPlayer.SetSINRThreshold(sinrTh);                        mPlayer.SetSINRSamples(sinrSamples);                    } else {                        mPlayer.SetCFOTh12(cf0th12);                        mPlayer.SetRMSSIFirstStage(rmssiFirstStage);                        mPlayer.SetSINRFirstStage(sinrFirstStage);                        mPlayer.SetSINRThreshold(sinrFinalStage);                    }                    mPlayer.SetAFRMSSIThreshold(afJumpRmssiTh);                    mPlayer.SetAFRMSSISamples(afJumpRmssiSamples);                    mPlayer.SetGoodChannelRMSSIThreshold(GdChRmssiTh);                    mPlayer.SetHybridSearch(hybridSearchValue);                    // mCurRssiThreshold.setText(String.valueOf(mService.getSignalThreshold()                    // + 90));                    // mCurRssiDelta.setText(String.valueOf(mService.getRmssiDel()));                    mCurOnThreshold.setText(String.valueOf(mPlayer.GetOnChannelThreshold()));                    mCurOffThreshold.setText(String.valueOf(mPlayer.GetOffChannelThreshold()));                    mCurSINRThreshold.setText(String.valueOf(mPlayer.GetSINRThreshold()));                    mCurSINRSamples.setText(String.valueOf(mPlayer.GetSINRSamples()));                    mCurCF0TH12.setText(String.valueOf(mPlayer.GetCFOTh12()));                    mCurRMSSIFirstStage.setText(String.valueOf(mPlayer.GetRMSSIFirstStage()));                    mCurSINRFirstStage.setText(String.valueOf(mPlayer.GetSINRFirstStage()));                    mCurSINRFinalStage.setText(String.valueOf(mPlayer.GetSINRThreshold()));                    mCurSinrSamplesCnt.setText(String.valueOf(mPlayer.GetSINRSamples()));                    mAFJumpRMSSIThreshold.setText(String.valueOf(mPlayer.GetAFRMSSIThreshold()));                    mAFJumpRMSSISamples.setText(String.valueOf(mPlayer.GetAFRMSSISamples()));                    mGoodChannelRMSSIThreshold.setText(String.valueOf(mPlayer                            .GetGoodChannelRMSSIThreshold()));                    mHybridSearch.setText(mPlayer.GetHybridSearch());                } catch (FMPlayerException e) {                    e.printStackTrace();                }                if (searchAlgoType == 1) {                    showToast(/* "RSSI : " + threshold + " / SNR : " + delta + */                    "ON : " + onChTh + " / OFF : " + offChTh + "\nSINR TH : " + sinrTh                            + " / SINR sample : " + sinrSamples + " / AFJumpRMSSI TH : "                            + afJumpRmssiTh + " / AFJumpRMSSI sample : " + afJumpRmssiSamples                            + " / GdChRmssi TH : " + GdChRmssiTh + " are adjusted");                } else {                    showToast(/* "RSSI : " + threshold + " / SNR : " + delta + */                    "CF0TH12 : " + cf0th12 + " / RMSSIFirstStage : " + rmssiFirstStage                            + "\nSINRFirstStage : " + sinrFirstStage + " / SINRFinalStage : "                            + sinrFinalStage + "\nAFJumpRMSSI TH : " + afJumpRmssiTh                            + " / AFJumpRMSSI sample : " + afJumpRmssiSamples + "\nGdChRmssi TH : "                            + GdChRmssiTh + " are adjusted");                }            }        });        refreshLayout();    }    @Override    protected void onStart() {        super.onStart();    }    @Override    public void onDestroy() {        Log.d(LOGTAG, "onDestroy: unbindFromService completed");        super.onDestroy();    }    private void showToast(String msg) {        Toast.makeText(mContext, msg, Toast.LENGTH_SHORT).show();    }    private void refreshLayout() {        try {            int searchAlgoType = mPlayer.GetSearchAlgoType();            if (mPlayer.isOn()) {                mCurChannel.setText(String.valueOf(mPlayer.getCurrentChannel()));                // mCurRssiThreshold.setText(String.valueOf(mService.getSignalThreshold()                // + 90));                // mCurRssiDelta.setText(String.valueOf(mService.getRmssiDel()));                mCurScanAlgorithmType.setText(String.valueOf(searchAlgoType));                mCurOnThreshold.setText(String.valueOf(mPlayer.GetOnChannelThreshold()));                mCurOffThreshold.setText(String.valueOf(mPlayer.GetOffChannelThreshold()));                mCurSINRThreshold.setText(String.valueOf(mPlayer.GetSINRThreshold()));                mCurSINRSamples.setText(String.valueOf(mPlayer.GetSINRSamples()));                mCurCF0TH12.setText(String.valueOf(mPlayer.GetCFOTh12()));                mCurRMSSIFirstStage.setText(String.valueOf(mPlayer.GetRMSSIFirstStage()));                mCurSINRFirstStage.setText(String.valueOf(mPlayer.GetSINRFirstStage()));                mCurSINRFinalStage.setText(String.valueOf(mPlayer.GetSINRThreshold()));                mCurSinrSamplesCnt.setText(String.valueOf(mPlayer.GetSINRSamples()));                mAFJumpRMSSIThreshold.setText(String.valueOf(mPlayer.GetAFRMSSIThreshold()));                mAFJumpRMSSISamples.setText(String.valueOf(mPlayer.GetAFRMSSISamples()));                mGoodChannelRMSSIThreshold.setText(String.valueOf(mPlayer                        .GetGoodChannelRMSSIThreshold()));                mHybridSearch.setText(mPlayer.GetHybridSearch());            } else {                Toast.makeText(mContext,                        getString(R.string.turn_on_radio, getString(R.string.app_name)),                        Toast.LENGTH_SHORT).show();                mCurChannel.setText("Off");                // mCurRssiThreshold.setText("Off");                // mCurRssiDelta.setText("Off");                mCurScanAlgorithmType.setText("Off");                mCurOnThreshold.setText("Off");                mCurOffThreshold.setText("Off");                mCurSINRThreshold.setText("Off");                mCurSINRSamples.setText("Off");                mCurCF0TH12.setText("Off");                mCurRMSSIFirstStage.setText("Off");                mCurSINRFirstStage.setText("Off");                mCurSINRFinalStage.setText("Off");                mCurSinrSamplesCnt.setText("Off");                mAFJumpRMSSIThreshold.setText("Off");                mAFJumpRMSSISamples.setText("Off");                mGoodChannelRMSSIThreshold.setText("Off");                mHybridSearch.setText("Off");                mCurChannel.setEnabled(false);                // mCurRssiThreshold.setEnabled(false);                // mCurRssiDelta.setEnabled(false);                mCurScanAlgorithmType.setEnabled(false);                mCurOnThreshold.setEnabled(false);                mCurOffThreshold.setEnabled(false);                mCurSINRThreshold.setEnabled(false);                mCurSINRSamples.setEnabled(false);                mCurCF0TH12.setEnabled(false);                mCurRMSSIFirstStage.setEnabled(false);                mCurSINRFirstStage.setEnabled(false);                mCurSINRFinalStage.setEnabled(false);                mCurSinrSamplesCnt.setEnabled(false);                mAFJumpRMSSIThreshold.setEnabled(false);                mAFJumpRMSSISamples.setEnabled(false);                mGoodChannelRMSSIThreshold.setEnabled(false);                mHybridSearch.setEnabled(false);                mBtnRenewal.setEnabled(false);                mBtnApply.setEnabled(false);                mBtnSetType.setEnabled(false);            }            if (searchAlgoType == 1) {                mNewScanAlgoLayout.setVisibility(View.GONE);                mOldScanAlgoLayout.setVisibility(View.VISIBLE);            } else {                mNewScanAlgoLayout.setVisibility(View.VISIBLE);                mOldScanAlgoLayout.setVisibility(View.GONE);            }        } catch (FMPlayerException e) {            e.printStackTrace();        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        super.onCreateOptionsMenu(menu);        return true;    }    @Override    public boolean onPrepareOptionsMenu(Menu menu) {        super.onPrepareOptionsMenu(menu);        menu.clear();        menu.add(0, MENU_CONTEXT_GOTO_RSSI_TEST, 0, "RSSI test");        // if        // (SecProductFeature_FMRADIO.SEC_PRODUCT_FEATURE_FMRADIO_HAS_INTENNA) {        // menu.add(0, MENU_CONTEXT_GOTO_INTENNA_TEST, 0, "Intenna test");        // }        // if        // (SecProductFeature_FMRADIO.SEC_PRODUCT_FEATURE_FMRADIO_SUPPORT_BROADCOM)        // {        // menu.add(0, MENU_CONTEXT_GOTO_SOFTMUTE_TEST, 0, "Softmute test");        // menu.add(0, MENU_CONTEXT_GOTO_VOLUMESETTING_TEST, 0,        // "VolumeSetting test");        // }        // if(SecProductFeature_FMRADIO.SEC_PRODUCT_FEATURE_FMRADIO_SUPPORT_STE){        // menu.add(0, MENU_CONTEXT_GOTO_SOFTMUTE_TEST_STE, 0,        // "Softmute test for STE");        // menu.add(0, MENU_CONTEXT_GOTO_VOLUMESETTING_TEST, 0,        // "VolumeSetting test");        // }        menu.add(0, MENU_CONTEXT_GOTO_NOISE_TEST, 0, "Noise Test");        menu.add(0, MENU_CONTEXT_GOTO_HYBRIDRADIO_TEST, 0, "HybridRadio Test");        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == MENU_CONTEXT_GOTO_RSSI_TEST) {            Intent intent = new Intent(this, RssiTestActivity.class);            startActivity(intent);            return true;        }        if (id == MENU_CONTEXT_GOTO_HYBRIDRADIO_TEST) {            Intent intent = new Intent(this, DnsKoreaTestActivity.class);            startActivity(intent);            return true;        }        // if        // (SecProductFeature_FMRADIO.SEC_PRODUCT_FEATURE_FMRADIO_HAS_INTENNA) {        // if (id == MENU_CONTEXT_GOTO_INTENNA_TEST) {        // Intent intent = new Intent(this, IntennaTestActivity.class);        // startActivity(intent);        // return true;        // }        // }        //        // if        // (SecProductFeature_FMRADIO.SEC_PRODUCT_FEATURE_FMRADIO_SUPPORT_BROADCOM)        // {        // if (id == MENU_CONTEXT_GOTO_SOFTMUTE_TEST) {        // Intent intent = new Intent(this, SoftmuteTestActivity.class);        // startActivity(intent);        // return true;        // }        //        // if (id == MENU_CONTEXT_GOTO_VOLUMESETTING_TEST) {        // Intent intent = new Intent(this, VolumeSettingTestActivity.class);        // startActivity(intent);        // return true;        // }        // }        //        // if(SecProductFeature_FMRADIO.SEC_PRODUCT_FEATURE_FMRADIO_SUPPORT_STE){        // if(id == MENU_CONTEXT_GOTO_SOFTMUTE_TEST_STE) {        // Intent intent = new Intent(this, SoftMuteTestSTEActivity.class);        // startActivity(intent);        // return true;        // }        // if(id == MENU_CONTEXT_GOTO_VOLUMESETTING_TEST) {        // Intent intent = new Intent(this, VolumeSettingTestActivity.class);        // startActivity(intent);        // return true;        // }        // }        if (id == MENU_CONTEXT_GOTO_NOISE_TEST) {            Intent intent = new Intent(this, NoiseTestActivity.class);            startActivity(intent);            return true;        }        return super.onOptionsItemSelected(item);    }}