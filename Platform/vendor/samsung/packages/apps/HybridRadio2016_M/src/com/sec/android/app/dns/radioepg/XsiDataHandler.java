package com.sec.android.app.dns.radioepg;import java.text.ParseException;import java.util.ArrayList;import org.xml.sax.Attributes;import org.xml.sax.SAXException;import org.xml.sax.helpers.DefaultHandler;import com.sec.android.app.dns.LogDns;import com.sec.android.app.dns.RadioDNSUtil;import com.sec.android.app.dns.radioepg.XsiData.Service;import com.sec.android.app.dns.radioepg.XsiData.Service.Multimedia;import com.sec.android.app.dns.radioepg.XsiData.Service.ServiceId;public class XsiDataHandler extends DefaultHandler {    public static class XsiSAXTerminalException extends SAXException {        private static final long serialVersionUID = -3131913498319297326L;    }    private static final String ATTRIBUTE_NAME_COST = "cost";    private static final String ATTRIBUTE_NAME_BITRATE = "bitrate";    private static final String ATTRIBUTE_NAME_CREATION_TIME = "creationTime";    private static final String ATTRIBUTE_NAME_HEIGHT = "height";    private static final String ATTRIBUTE_NAME_ID = "id";    private static final String ATTRIBUTE_NAME_MIME = "mime";    private static final String ATTRIBUTE_NAME_OFFSET = "offset";    private static final String ATTRIBUTE_NAME_TYPE = "type";    private static final String ATTRIBUTE_NAME_URL = "url";    private static final String ATTRIBUTE_NAME_WIDTH = "width";    private static final String TAG = "XsiDataHandler";    private static final String TAG_NAME_MEDIA_DESCRIPTION = "mediaDescription";    private static final String TAG_NAME_MULTIMEDIA = "multimedia";    private static final String TAG_NAME_SERVICE = "service";    private static final String TAG_NAME_SERVICE_ID = "serviceID";    private static final String TAG_NAME_SERVICE_INFORMATION = "serviceInformation";    private static final String TAG_NAME_SERVICES = "services";    private ArrayList<String> mArrayKey = null;    private XsiData mData = null;    private Service mService = null;    private String mUpdateTime = null;    private boolean schemaMediaDescriptionOn = false;    private boolean schemaServiceInformationOn = false;    private boolean schemaServiceOn = false;    private boolean schemaServicesOn = false;    @Override    public void endElement(String uri, String localName, String qName) throws SAXException {        if (localName.equalsIgnoreCase(TAG_NAME_SERVICE_INFORMATION)) {            schemaServiceInformationOn = false;        } else if (schemaServiceInformationOn && localName.equalsIgnoreCase(TAG_NAME_SERVICES)) {            schemaServicesOn = false;        } else if (schemaServicesOn && localName.equalsIgnoreCase(TAG_NAME_SERVICE)) {            schemaServiceOn = false;            for (String key : mArrayKey) {                mData.addService(key, mService);            }        } else if (schemaServiceOn && localName.equalsIgnoreCase(TAG_NAME_MEDIA_DESCRIPTION)) {            schemaMediaDescriptionOn = false;        }    }    public XsiData getData() {        return mData;    }    public void setUpdateTime(String time) {        mUpdateTime = time;    }    @Override    public void startElement(String uri, String localName, String qName, Attributes attributes)            throws SAXException {        String name = null;        String value = null;        if (localName.equalsIgnoreCase(TAG_NAME_SERVICE_INFORMATION)) {            schemaServiceInformationOn = true;            mData = new XsiData();            mArrayKey = new ArrayList<String>();            for (int i = attributes.getLength() - 1; i >= 0; i--) {                name = attributes.getQName(i);                value = attributes.getValue(i);                if (name.equalsIgnoreCase(ATTRIBUTE_NAME_CREATION_TIME)) {                    try {                        if (mUpdateTime != null) {                            int oldTime = RadioDNSUtil.dateToInt(RadioDNSUtil                                    .stringToDate(mUpdateTime));                            int newTime = RadioDNSUtil.dateToInt(RadioDNSUtil.stringToDate(value));                            if (newTime <= oldTime) {                                throw new XsiSAXTerminalException();                            }                        }                    } catch (ParseException e) {                        LogDns.e(TAG, e);                    } finally {                        mData.setCreationTime(value);                    }                    break;                }            }        } else if (schemaServiceInformationOn && localName.equalsIgnoreCase(TAG_NAME_SERVICES)) {            schemaServicesOn = true;        } else if (schemaServicesOn && localName.equalsIgnoreCase(TAG_NAME_SERVICE)) {            schemaServiceOn = true;            mService = new Service();            mArrayKey.clear();        } else if (schemaServiceOn) {            if (localName.equalsIgnoreCase(TAG_NAME_SERVICE_ID)) {                ServiceId sId = new ServiceId();                String[] token = null;                for (int i = attributes.getLength() - 1; i >= 0; i--) {                    name = attributes.getQName(i);                    value = attributes.getValue(i);                    if (name.equalsIgnoreCase(ATTRIBUTE_NAME_ID)) {                        sId.setId(value);                        token = value.split(":");                        if (token != null && token[0].equalsIgnoreCase("fm")) {                            token = value.split("\\.");                            mArrayKey.add(token[1] + token[2]);                        }                    } else if (name.equalsIgnoreCase(ATTRIBUTE_NAME_MIME)) {                        sId.setMime(value);                    } else if (name.equalsIgnoreCase(ATTRIBUTE_NAME_OFFSET)) {                        sId.setOffset(value);                    } else if (name.equalsIgnoreCase(ATTRIBUTE_NAME_COST)) {                        sId.setCost(value);                    } else if (name.equalsIgnoreCase(ATTRIBUTE_NAME_BITRATE)) {                        sId.setBitRate(value);                    }                }                mService.addServiceId(sId);            } else if (localName.equalsIgnoreCase(TAG_NAME_MEDIA_DESCRIPTION)) {                schemaMediaDescriptionOn = true;            } else if (schemaMediaDescriptionOn && localName.equalsIgnoreCase(TAG_NAME_MULTIMEDIA)) {                Multimedia m = new Multimedia();                for (int i = attributes.getLength() - 1; i >= 0; i--) {                    name = attributes.getQName(i);                    value = attributes.getValue(i);                    if (name.equalsIgnoreCase(ATTRIBUTE_NAME_URL)) {                        m.setUrl(value);                    } else if (name.equalsIgnoreCase(ATTRIBUTE_NAME_TYPE)) {                        m.setType(value);                    } else if (name.equalsIgnoreCase(ATTRIBUTE_NAME_HEIGHT)) {                        m.setHeight(value);                    } else if (name.equalsIgnoreCase(ATTRIBUTE_NAME_WIDTH)) {                        m.setWidth(value);                    }                }                mService.addMultimedia(m);            }        }    }}