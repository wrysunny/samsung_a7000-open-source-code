package com.sec.android.app.fm.data;import com.sec.android.app.fm.Log;import java.io.Serializable;/** * Channel information data structure. *  * @author vanrajvala */public class Channel implements Serializable, Comparable<Channel> {    private static final long serialVersionUID = 1L;    public static final int STATE_ADD = 0;    public static final int STATE_CHANNEL = 1;    private int mState;    public int mFreqency;    float mFreqMHz = 0f; // for compatibility    public String mFreqName;    public boolean mIsFavourite; // Is given channel is favorite or not.    public boolean mIsVisAvailable;    public int mPi;    public int mPosition;// Position of the channel in favorite list.    public boolean mIsChecked;    /**     * Creates instance of channel.     *      * @param freqMHz     */    public Channel(final int freq) {        mFreqency = freq;        mFreqName = "";        mPosition = -1;        mIsChecked = false;        mIsFavourite = false;        mPi = -1;        mIsVisAvailable = false;        mState=STATE_CHANNEL;    }    public Channel() {        mFreqency = 0;        mFreqName = "";        mPosition = -1;        mIsChecked = false;        mIsFavourite = false;        mPi = -1;        mIsVisAvailable = false;                mState=STATE_ADD;    }    /**     * Creates instance of channel.     *      * @param freqMHz     * @param freqName     */    public Channel(final int freq, String freqName) {        mFreqency = freq;        mFreqName = freqName;        mPosition = -1;        mIsChecked = false;        mIsFavourite = false;        mPi = -1;        mIsVisAvailable = false;    }    /**     * Creates instance of channel.     *      * @param freqMHz     * @param freqName     * @param freqName     */    public Channel(final int freq, final String freqName, final int pi) {        mFreqency = freq;        mFreqName = freqName;        mPosition = -1;        mIsChecked = false;        mPi = pi;        mIsFavourite = false;        mIsVisAvailable = false;    }    public int getState()    {        return mState;    }    @Override    public int compareTo(Channel another) {        return this.mFreqency - another.mFreqency;    }    public double getFrequency()        //returns the current frequency of the channel    {        double frequency=0.0;        frequency=(double)mFreqency/100.0;        return frequency;    }    @Override    public boolean equals(Object o) {        if (o instanceof Channel) {            Channel ob = (Channel) o;            if (ob.mFreqency == this.mFreqency)                return true;        }        return false;    }    @Override    public String toString() {        return "\n--->Freq :" + Log.filter(this.mFreqency) + " Name :" + this.mFreqName                + " Is Fav :" + this.mIsFavourite + " Position :" + this.mPosition + "<----";    }}